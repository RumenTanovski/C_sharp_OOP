14April2019

using MortalEngines.Core;

namespace MortalEngines
{
    public class StartUp
    {
        public static void Main()
        {
            Engine engine = new Engine();
            engine.Run();
        }
    }
}

using MortalEngines.Core.Contracts;
using System;

namespace MortalEngines.Core
{
    public class Engine : IEngine
    {
        private readonly IMachinesManager machinesManager;

        public Engine()
        {
            this.machinesManager = new MachinesManager();
        }

        public void Run()
        {
            string line = Console.ReadLine();

            while (line != "Quit")
            {
                string[] commandItems = line.Split(" ", StringSplitOptions.RemoveEmptyEntries);

                string result = string.Empty;

                try
                {
                    switch (commandItems[0])
                    {
                        case "HirePilot":
                            result += this.machinesManager.HirePilot(commandItems[1]);
                            break;

                        case "PilotReport":
                            result += this.machinesManager.PilotReport(commandItems[1]);
                            break;

                        case "ManufactureTank":
                            result += this.machinesManager.ManufactureTank(commandItems[1],
                                double.Parse(commandItems[2]),
                                double.Parse(commandItems[3]));
                            break;

                        case "ManufactureFighter":
                            result += this.machinesManager.ManufactureFighter(commandItems[1],
                                double.Parse(commandItems[2]),
                                double.Parse(commandItems[3]));
                            break;

                        case "MachineReport":
                            result += this.machinesManager.MachineReport(commandItems[1]);
                            break;

                        case "AggressiveMode":
                            result += this.machinesManager.ToggleFighterAggressiveMode(commandItems[1]);
                            break;

                        case "DefenseMode":
                            result += this.machinesManager.ToggleTankDefenseMode(commandItems[1]);
                            break;

                        case "Engage":
                            result += this.machinesManager.EngageMachine(commandItems[1], commandItems[2]);
                            break;

                        case "Attack":
                            result += this.machinesManager.AttackMachines(commandItems[1], commandItems[2]);
                            break;

                        default:
                            break;
                    }

                    Console.WriteLine(result);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error: {ex.Message}");
                }

                line = Console.ReadLine();
            }
        }
    }
}

namespace MortalEngines.Core
{
    using Contracts;
    using MortalEngines.Common;
    using MortalEngines.Entities.Contracts;
    using MortalEngines.Models;
    using System.Collections.Generic;
    using System.Linq;

    public class MachinesManager : IMachinesManager
    {
        private readonly List<IPilot> pilots;
        private readonly List<IMachine> machines;

        public MachinesManager()
        {
            this.pilots = new List<IPilot>();
            this.machines = new List<IMachine>();
        }

        public string HirePilot(string name)
        {
            if (this.pilots.Any(p => p.Name == name))
            {
                return string.Format(OutputMessages.PilotExists, name);
            }

            IPilot pilot = new Pilot(name);
            this.pilots.Add(pilot);

            return string.Format(OutputMessages.PilotHired, pilot.Name);
        }

        public string ManufactureTank(string name, double attackPoints, double defensePoints)
        {
            if (this.machines.Any(m => m.Name == name && m.GetType().Name == nameof(Tank)))
            {
                return string.Format(OutputMessages.MachineExists, name);
            }

            ITank tank = new Tank(name, attackPoints, defensePoints);
            this.machines.Add(tank);

            return string.Format(OutputMessages.TankManufactured,
                tank.Name,
                tank.AttackPoints,
                tank.DefensePoints);
        }

        public string ManufactureFighter(string name, double attackPoints, double defensePoints)
        {
            if (this.machines.Any(m => m.Name == name && m.GetType().Name == nameof(Fighter)))
            {
                return string.Format(OutputMessages.MachineExists, name);
            }

            IFighter fighter = new Fighter(name, attackPoints, defensePoints);
            this.machines.Add(fighter);

            return string.Format(OutputMessages.FighterManufactured,
                fighter.Name,
                fighter.AttackPoints,
                fighter.DefensePoints,
                fighter.AggressiveMode == true ? "ON" : "OFF");
        }

        public string EngageMachine(string selectedPilotName, string selectedMachineName)
        {
            if (this.pilots.FirstOrDefault(p => p.Name == selectedPilotName) == null)
            {
                return string.Format(OutputMessages.PilotNotFound, selectedPilotName);
            }

            if (this.machines.FirstOrDefault(m => m.Name == selectedMachineName) == null)
            {
                return string.Format(OutputMessages.MachineNotFound, selectedMachineName);
            }

            IMachine machine = this.machines.FirstOrDefault(m => m.Name == selectedMachineName);

            if (machine.Pilot != null)
            {
                return string.Format(OutputMessages.MachineHasPilotAlready, machine.Name);
            }

            IPilot pilot = this.pilots.FirstOrDefault(p => p.Name == selectedPilotName);

            machine.Pilot = pilot;
            pilot.AddMachine(machine);

            return string.Format(OutputMessages.MachineEngaged, pilot.Name, machine.Name);
        }

        public string AttackMachines(string attackingMachineName, string defendingMachineName)
        {
            IMachine attacker = this.machines.FirstOrDefault(m => m.Name == attackingMachineName);

            if (attacker == null)
            {
                return string.Format(OutputMessages.MachineNotFound, attackingMachineName);
            }

            IMachine enemy = this.machines.FirstOrDefault(m => m.Name == defendingMachineName);

            if (enemy == null)
            {
                return string.Format(OutputMessages.MachineNotFound, defendingMachineName);
            }

            if (attacker.HealthPoints <= 0)
            {
                return string.Format(OutputMessages.DeadMachineCannotAttack, attacker.Name);
            }

            if (enemy.HealthPoints <= 0)
            {
                return string.Format(OutputMessages.DeadMachineCannotAttack, enemy.Name);
            }

            attacker.Attack(enemy);

            return string.Format(OutputMessages.AttackSuccessful,
                enemy.Name,
                attacker.Name,
                enemy.HealthPoints);
        }

        public string PilotReport(string pilotReporting)
        {
            return this.pilots.FirstOrDefault(p => p.Name == pilotReporting).Report();
        }

        public string MachineReport(string machineName)
        {
            return this.machines.FirstOrDefault(m => m.Name == machineName).ToString();
        }

        public string ToggleFighterAggressiveMode(string fighterName)
        {
            if (this.machines.FirstOrDefault(m => m.Name == fighterName && m.GetType().Name == nameof(Fighter)) == null)
            {
                return string.Format(OutputMessages.MachineExists, fighterName);
            }

            IFighter fighter = (IFighter)this.machines.FirstOrDefault(m => m.Name == fighterName && m.GetType().Name == nameof(Fighter));
            fighter.ToggleAggressiveMode();

            return string.Format(OutputMessages.FighterOperationSuccessful, fighter.Name);
        }

        public string ToggleTankDefenseMode(string tankName)
        {
            if (this.machines.FirstOrDefault(m => m.Name == tankName && m.GetType().Name == nameof(Tank)) == null)
            {
                return string.Format(OutputMessages.MachineNotFound, tankName);
            }

            ITank tank = (ITank)this.machines.FirstOrDefault(m => m.Name == tankName && m.GetType().Name == nameof(Tank));
            tank.ToggleDefenseMode();

            return string.Format(OutputMessages.TankOperationSuccessful, tank.Name);
        }
    }
}

using MortalEngines.Entities.Contracts;
using System;
using System.Collections.Generic;
using System.Text;

namespace MortalEngines.Models
{
    public abstract class BaseMachine : IMachine
    {
        private string name;
        private IPilot pilot;

        protected BaseMachine(string name, double attackPoints, double defensePoints, double healthPoints)
        {
            this.Name = name;
            this.HealthPoints = healthPoints;
            this.AttackPoints = attackPoints;
            this.DefensePoints = defensePoints;
            this.Targets = new List<string>();
        }

        public string Name
        {
            get => this.name;

            private set
            {
                if (string.IsNullOrWhiteSpace(value))
                {
                    throw new ArgumentNullException(ExceptionMessages.NullMachineName);
                }

                this.name = value;
            }
        }

        public IPilot Pilot
        {
            get => this.pilot;

            set
            {
                if (value == null)
                {
                    throw new NullReferenceException(ExceptionMessages.NullPilot);
                }

                this.pilot = value;
            }
        }

        public double HealthPoints { get; set; }

        public double AttackPoints { get; protected set; }

        public double DefensePoints { get; protected set; }

        public IList<string> Targets { get; private set; }

        public void Attack(IMachine target)
        {
            if (target == null)
            {
                throw new NullReferenceException(ExceptionMessages.NullTarget);
            }

            double difference = Math.Abs(this.AttackPoints - target.DefensePoints);

            if (target.HealthPoints - difference < 0)
            {
                target.HealthPoints = 0;
            }
            else
            {
                target.HealthPoints -= difference;
            }

            this.Targets.Add(target.Name);
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine($"- {this.Name}");
            sb.AppendLine($" *Type: {this.GetType().Name}");
            sb.AppendLine($" *Health: {this.HealthPoints:F2}");
            sb.AppendLine($" *Attack: {this.AttackPoints:F2}");
            sb.AppendLine($" *Defense: {this.DefensePoints:F2}");

            if (this.Targets.Count == 0)
            {
                sb.AppendLine($" *Targets: None");
            }
            else
            {
                sb.AppendLine($" *Targets: {string.Join(",", this.Targets)}");
            }

            return sb.ToString().TrimEnd();
        }
    }
}

using MortalEngines.Entities.Contracts;
using System.Text;

namespace MortalEngines.Models
{
    public class Fighter : BaseMachine, IFighter
    {
        private const int InitialHealthPoints = 200;
        private const int InitialAttackPoints = 50;
        private const int InitialDefensePoints = 25;

        public Fighter(string name, double attackPoints, double defensePoints)
            : base(name, attackPoints + InitialAttackPoints, defensePoints - InitialDefensePoints, InitialHealthPoints)
        {
            this.AggressiveMode = true;
        }

        public bool AggressiveMode { get; private set; }

        public void ToggleAggressiveMode()
        {
            if (this.AggressiveMode == false)
            {
                this.AggressiveMode = true;
                this.AttackPoints += InitialAttackPoints;
                this.DefensePoints -= InitialDefensePoints;
            }
            else
            {
                this.AggressiveMode = false;
                this.AttackPoints -= InitialAttackPoints;
                this.DefensePoints += InitialDefensePoints;
            }
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(base.ToString());
            sb.AppendLine($" *Aggressive: {(this.AggressiveMode == true ? "ON" : "OFF")}");

            return sb.ToString().TrimEnd();
        }
    }
}

using MortalEngines.Entities.Contracts;
using System.Text;

namespace MortalEngines.Models
{
    public class Tank: BaseMachine, ITank
    {
        private const int InitialHealthPoints = 100;
        private const int InitialAttackPoints = 40;
        private const int InitialDefensePoints = 30;

        public Tank(string name, double attackPoints, double defensePoints)
            : base(name, attackPoints - InitialAttackPoints, defensePoints + InitialDefensePoints, InitialHealthPoints)
        {
            this.DefenseMode = true;
        }

        public bool DefenseMode { get; private set; }

        public void ToggleDefenseMode()
        {
            if (this.DefenseMode == false)
            {
                this.DefenseMode = true;
                this.AttackPoints -= InitialAttackPoints;
                this.DefensePoints += InitialDefensePoints;
            }
            else
            {
                this.DefenseMode = false;
                this.AttackPoints += InitialAttackPoints;
                this.DefensePoints -= InitialDefensePoints;
            }
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine(base.ToString());
            sb.AppendLine($" *Defense: {(this.DefenseMode == true ? "ON" : "OFF")}");

            return sb.ToString().TrimEnd();
        }
    }
}

using MortalEngines.Entities.Contracts;
using System;
using System.Collections.Generic;
using System.Text;

namespace MortalEngines.Models
{
    public class Pilot : IPilot
    {
        private string name;
        private readonly List<IMachine> machines;

        public Pilot(string name)
        {
            this.Name = name;
            this.machines = new List<IMachine>();
        }

        public string Name
        {
            get => this.name;

            private set
            {
                if (string.IsNullOrWhiteSpace(value))
                {
                    throw new ArgumentNullException(ExceptionMessages.NullPilotName);
                }

                this.name = value;
            }
        }

        public void AddMachine(IMachine machine)
        {
            if (machine == null)
            {
                throw new ArgumentNullException(ExceptionMessages.NullMachine);
            }

            this.machines.Add(machine);
        }

        public string Report()
        {
            StringBuilder sb = new StringBuilder();

            sb.AppendLine($"{this.Name} - {this.machines.Count} machines");

            foreach (IMachine machine in this.machines)
            {
                sb.AppendLine(machine.ToString());
            }

            return sb.ToString().TrimEnd();
        }
    }
}

namespace MortalEngines
{
    public static class ExceptionMessages
    {
        public const string NullPilotName = "Pilot name cannot be null or empty string.";

        public const string NullMachine = "Null machine cannot be added to the pilot.";

        public const string NullMachineName = "Machine name cannot be null or empty.";

        public const string NullPilot = "Pilot cannot be null.";

        public const string NullTarget = "Target cannot be null";
               
    }
}

namespace MortalEngines.Common
{
    public class OutputMessages
    {
        public const string PilotHired = "Pilot {0} hired";

        public const string PilotExists = "Pilot {0} is hired already";

        public const string TankManufactured = "Tank {0} manufactured - attack: {1:F2}; defense: {2:F2}";

        public const string FighterManufactured = "Fighter {0} manufactured - attack: {1:F2}; defense: {2:F2}; aggressive: {3}";

        public const string MachineExists = "Machine {0} is manufactured already";

        public const string MachineHasPilotAlready = "Machine {0} is already occupied";

        public const string PilotNotFound = "Pilot {0} could not be found";

        public const string MachineNotFound = "Machine {0} could not be found";

        public const string MachineEngaged = "Pilot {0} engaged machine {1}";

        public const string FighterOperationSuccessful = "Fighter {0} toggled aggressive mode";

        public const string TankOperationSuccessful = "Tank {0} toggled defense mode";

        public const string AttackSuccessful = "Machine {0} was attacked by machine {1} - current health: {2:F2}";

        public const string DeadMachineCannotAttack = "Dead machine {0} cannot attack or be attacked";
    }
}






