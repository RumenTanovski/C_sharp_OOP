Lab1
using System;

namespace Lab1RhombusOfStars
{
    class StartUp
    {
        static void Main(string[] args)
        {
            int count = int.Parse(Console.ReadLine());

            for (int i = 1; i <= count; i++)
            {
                printRow(i, count);
            }

            for (int i = count-1; i > 0; i--)
            {
                printRow(i, count);
            }
        }

        private static void printRow(int stars, int totalStars)
        {
            int leadingSpaces= totalStars-stars;
            Console.Write(new string(' ', leadingSpaces));

            for (int i = 0; i < stars; i++)
            {
                Console.Write("* ");
            }
            Console.WriteLine();
        }
    }
}

Lab2
using System;
using System.Linq;

namespace Lab2PointInRectangle
{
    class StartUp
    {
        static void Main(string[] args)
        {
            int[] coordinats = InputParse();

            Point topLeft = new Point(coordinats[0], coordinats[1]);
            Point bottomRight = new Point(coordinats[2], coordinats[3]);

            Rectangle rectangle = new Rectangle(topLeft, bottomRight);

            int numberOfPoints = int.Parse(Console.ReadLine());

            for (int i = 0; i < numberOfPoints; i++)
            {
                int[] point = InputParse();

                Point pointToCheck = new Point(point[0], point[1]);

                Console.WriteLine(rectangle.Contains(pointToCheck));
            }

        }

        private static int[] InputParse()
        {
            return Console.ReadLine()
                .Split(" ", StringSplitOptions.RemoveEmptyEntries)
                .Select(int.Parse)
                .ToArray();
        }
    }
}


namespace Lab2PointInRectangle
{
    public class Point
    {
        private int x;
        private int y;

        public int X { get; set; }
        public int Y { get; set; }

        public Point(int x, int y)
        {
            X = x;
            Y = y;
        }
    }
}


namespace Lab2PointInRectangle
{
    public class Rectangle
    {        
        public Point TopLeft { get; set; }
        public Point BottomRight { get; set; }

        public Rectangle(Point topLeft, Point bottamRight)
        {
            TopLeft = topLeft;
            BottomRight = bottamRight;
        } 

        public bool Contains(Point point)
        {
            bool insideX = this.TopLeft.X <= point.X && this.BottomRight.X >= point.X;
            bool insideY = this.TopLeft.Y <= point.Y && this.BottomRight.Y >= point.Y;
            
                return insideX&&insideY;
        }
    }
}


Lab3
namespace P03_StudentSystem
{
    class StartUp
    {
        static void Main()
        {
            StudentSystem studentSystem = new StudentSystem();
            while (true)
            {
                studentSystem.ParseCommand();
            }
        }
    }
}
namespace P03_StudentSystem
{    
    public class Student
    {
        private string name;
        private int age;
        private double grade;

        public double Grade
        {
            get { return grade; }
            set { grade = value; }
        }

        public int Age
        {
            get { return age; }
            set { age = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public Student(string name, int age, double grade)
        {
            this.Name = name;
            this.Age = age;
            this.grade = grade;
        }
    }
}

using System;
using System.Collections.Generic;

namespace P03_StudentSystem
{
    class StudentSystem
    {
        private Dictionary<string, Student> repo;

        public StudentSystem()
        {
            this.Repo = new Dictionary<string, Student>();
        }

        public Dictionary<string, Student> Repo
        {
            get { return repo; }
            private set { repo = value; }
        }

        public void ParseCommand()
        {
            string[] args = Console.ReadLine().Split();
            switch (args[0])
            {
                case "Create":
                    CreateStudent(args);
                    break;
                case "Show":
                    ShowStudent(args);
                    break;
                case "Exit":
                    ExitOfProgram();
                    break;
                default:
                    break;
            }
        }

        private static void ExitOfProgram()
        {
            Environment.Exit(0);
        }

        private void ShowStudent(string[] args)
        {
            var name = args[1];
            if (Repo.ContainsKey(name))
            {
                var student = Repo[name];
                string view = $"{student.Name} is {student.Age} years old.";

                if (student.Grade >= 5.00)
                {
                    view += " Excellent student.";
                }
                else if (student.Grade < 5.00 && student.Grade >= 3.50)
                {
                    view += " Average student.";
                }
                else
                {
                    view += " Very nice person.";
                }

                Console.WriteLine(view);
            }
        }

        private void CreateStudent(string[] args)
        {
            var name = args[1];
            var age = int.Parse(args[2]);
            var grade = double.Parse(args[3]);
            if (!repo.ContainsKey(name))
            {
                var student = new Student(name, age, grade);
                Repo[name] = student;
            }
        }
    }
}


Lab4HotelReservation

using System;
using System.Linq;

namespace Lab4HotelReservation
{
    class StartUp
    {
        static void Main(string[] args)
        {
            //input
            //50.25 5 Summer VIP
            string[] input = Console.ReadLine()
                .Split(" ", StringSplitOptions.RemoveEmptyEntries)
                .ToArray();

            decimal pricePerDay = decimal.Parse(input[0]);
            int days = int.Parse(input[1]);            
            Season season = (Season)Enum.Parse(typeof(Season), input[2]);
            Discount discount = Discount.None;

            if (input.Count() == 4)
            {
                discount = (Discount)Enum.Parse(typeof(Discount), input[3]);
            }

            decimal totalPrice =  PriceCalculator.GetTotalPrice(pricePerDay,days,season,discount);
            Console.WriteLine($"{totalPrice:F2}");

        }
    }
}

namespace Lab4HotelReservation
{
    public enum Season
    {
        Autumn = 1,
        Spring,
        Winter,
        Summer
    }
}

namespace Lab4HotelReservation
{
    public enum Discount
    {
        None,
        VIP = 20,
        SecondVisit = 10
    }
}

namespace Lab4HotelReservation
{
    public static class PriceCalculator
    {       
        public static decimal GetTotalPrice(decimal pricePerDay, int numbersOfDay,Season season, Discount discount)
        {
            decimal priceBeforDiscount = pricePerDay * numbersOfDay * (int)season; 
            decimal discountAmount = priceBeforDiscount*(decimal)discount/100;
            decimal finalPrice = priceBeforDiscount - discountAmount;
            return finalPrice;
        }
    }
}




P01_RawData

namespace P01_RawData
{
    public class StartUp
    {
        public static void Main(string[] args)
        {
            Runer runer = new Runer();
            runer.Run();
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace P01_RawData
{
    public class Runer
    {
        private List<Car> cars;

        public void Run()
        {
            cars = new List<Car>();
            int lines = int.Parse(Console.ReadLine());

            for (int i = 0; i < lines; i++)
            {
                string[] parameters = Console.ReadLine().Split(new[] { ' ' },
                    StringSplitOptions.RemoveEmptyEntries);
                CreateCar(parameters);
            }

            string command = Console.ReadLine();
            if (command == "fragile")
            {
                List<string> fragile = cars
                    .Where(x => x.Cargo.CargoType == "fragile" 
                    && x.Tires.Any(y => y.Pressure < 1))
                    .Select(x => x.Model)
                    .ToList();

                Console.WriteLine(string.Join(Environment.NewLine, fragile));                                              
            }
            else
            {
                List<string> flamable = cars
                    .Where(x => x.Cargo.CargoType == "flamable" 
                    && x.Engine.EnginePower > 250)
                    .Select(x => x.Model)
                    .ToList();

                Console.WriteLine(string.Join(Environment.NewLine, flamable));                                
            }
        }

        private void CreateCar(string[] parameters)
        {
            string model = parameters[0];

            int engineSpeed = int.Parse(parameters[1]);
            int enginePower = int.Parse(parameters[2]);
            Engine engine = new Engine(engineSpeed, enginePower);

            int cargoWeight = int.Parse(parameters[3]);
            string cargoType = parameters[4];
            Cargo cargo = new Cargo(cargoWeight, cargoType);

            double tire1Pressure = double.Parse(parameters[5]);
            int tire1Age = int.Parse(parameters[6]);
            double tire2Pressure = double.Parse(parameters[7]);
            int tire2Age = int.Parse(parameters[8]);
            double tire3Pressure = double.Parse(parameters[9]);
            int tire3Age = int.Parse(parameters[10]);
            double tire4Pressure = double.Parse(parameters[11]);
            int tire4Age = int.Parse(parameters[12]);

            Tire[] tires = new Tire[4]
            {
                new Tire(tire1Age, tire1Pressure),
                new Tire(tire2Age, tire2Pressure),
                new Tire(tire3Age, tire3Pressure),
                new Tire(tire4Age, tire4Pressure)
            };

            Car currentCar = new Car(model, engine, cargo, tires);
            cars.Add(currentCar);
        }
    }
}


namespace P01_RawData
{
    public class Car
    {                       
        public Car(string model,Engine engine, Cargo cargo,Tire[] tires )
        {
            this.Model = model;
            this.Engine = engine;
            this.Cargo = cargo;
            this.Tires = tires;
        }

        public string Model { get; set; }
        public Engine Engine { get; set; }
        public Cargo Cargo { get; set; }
        public Tire[] Tires { get; set; }
    }
}


namespace P01_RawData
{
    public class Cargo
    {        
        public Cargo(int cargoWeight, string cargoType)
        {
            this.CargoWeight = cargoWeight;
            this.CargoType = cargoType;
        }

        public int CargoWeight { get; set; }
        public string CargoType { get; set; }
    }
}

namespace P01_RawData
{
    public class Engine
    {
        public Engine(int engineSpeed, int enginePower)
        {
            this.EngineSpeed = engineSpeed;
            this.EnginePower = enginePower;
        }

        public int EngineSpeed { get; set; }
        public int EnginePower { get; set; }
    }
}

namespace P01_RawData
{
    public class Tire
    {
        public Tire() { }

        public Tire(int year, double pressure) : this()
        {
            this.Year = year;
            this.Pressure = pressure;
        }

        public int Year { get; set; }
        public double Pressure { get; set; }
    }
}



P02_CarsSalesman

namespace P02_CarsSalesman
{  
    
    public class StartUp
    {
        public static void Main(string[] args)
        {
            Runer runer = new Runer();
            runer.Run();
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;


namespace P02_CarsSalesman
{
    public class Runer
    {
        List<Car> cars;
        List<Engine> engines;

        public void Run()
        {
            cars = new List<Car>();
            engines = new List<Engine>();
            int engineCount = int.Parse(Console.ReadLine());
            for (int i = 0; i < engineCount; i++)
            {
                string[] parameters = Console.ReadLine().Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                string model = parameters[0];
                int power = int.Parse(parameters[1]);

                int displacement = -1;

                if (parameters.Length == 3 && int.TryParse(parameters[2], out displacement))
                {
                    engines.Add(new Engine(model, power, displacement));
                }
                else if (parameters.Length == 3)
                {
                    string efficiency = parameters[2];
                    engines.Add(new Engine(model, power, efficiency));
                }
                else if (parameters.Length == 4)
                {
                    string efficiency = parameters[3];
                    engines.Add(new Engine(model, power, int.Parse(parameters[2]), efficiency));
                }
                else
                {
                    engines.Add(new Engine(model, power));
                }
            }
            int carCount = int.Parse(Console.ReadLine());
            for (int i = 0; i < carCount; i++)
            {
                string[] parameters = Console.ReadLine().Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                string model = parameters[0];
                string engineModel = parameters[1];
                Engine engine = engines.FirstOrDefault(x => x.model == engineModel);

                int weight = -1;

                if (parameters.Length == 3 && int.TryParse(parameters[2], out weight))
                {
                    cars.Add(new Car(model, engine, weight));
                }
                else if (parameters.Length == 3)
                {
                    string color = parameters[2];
                    cars.Add(new Car(model, engine, color));
                }
                else if (parameters.Length == 4)
                {
                    string color = parameters[3];
                    cars.Add(new Car(model, engine, int.Parse(parameters[2]), color));
                }
                else
                {
                    cars.Add(new Car(model, engine));
                }
            }

            foreach (var car in cars)
            {
                Console.WriteLine(car);
            }
        }
    }
}

using System.Text;

namespace P02_CarsSalesman
{
    public class Car
    {
        private const string offset = "  ";

        public string model;
        public Engine engine;
        public int weight;
        public string color;

        public Car(string model, Engine engine)
        {
            this.model = model;
            this.engine = engine;
            this.weight = -1;
            this.color = "n/a";
        }

        public Car(string model, Engine engine, int weight)
        {
            this.model = model;
            this.engine = engine;
            this.weight = weight;
            this.color = "n/a";
        }

        public Car(string model, Engine engine, string color)
        {
            this.model = model;
            this.engine = engine;
            this.weight = -1;
            this.color = color;
        }

        public Car(string model, Engine engine, int weight, string color)
        {
            this.model = model;
            this.engine = engine;
            this.weight = weight;
            this.color = color;
        }


        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendFormat("{0}:\n", this.model);
            sb.Append(this.engine.ToString());
            sb.AppendFormat("{0}Weight: {1}\n", offset, this.weight == -1 ? "n/a" : this.weight.ToString());
            sb.AppendFormat("{0}Color: {1}", offset, this.color);

            return sb.ToString();
        }
    }
}


using System.Text;

namespace P02_CarsSalesman
{
    public class Engine
    {
        private const string offset = "  ";

        public string model;
        public int power;
        public int displacement;
        public string efficiency;

        public Engine(string model, int power)
        {
            this.model = model;
            this.power = power;
            this.displacement = -1;
            this.efficiency = "n/a";
        }

        public Engine(string model, int power, int displacement)
        {
            this.model = model;
            this.power = power;
            this.displacement = displacement;
            this.efficiency = "n/a";
        }

        public Engine(string model, int power, string efficiency)
        {
            this.model = model;
            this.power = power;
            this.displacement = -1;
            this.efficiency = efficiency;
        }

        public Engine(string model, int power, int displacement, string efficiency)
        {
            this.model = model;
            this.power = power;
            this.displacement = displacement;
            this.efficiency = efficiency;
        }



        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendFormat("{0}{1}:\n", offset, this.model);
            sb.AppendFormat("{0}{0}Power: {1}\n", offset, this.power);
            sb.AppendFormat("{0}{0}Displacement: {1}\n", offset, this.displacement == -1 ? "n/a" : this.displacement.ToString());
            sb.AppendFormat("{0}{0}Efficiency: {1}\n", offset, this.efficiency);

            return sb.ToString();
        }
    }
}



P03_JediGalaxy

using System;
using System.Linq;

namespace P03_JediGalaxy
{
    public class StartUp
    {
        public static void Main()
        {
            Engine engine = new Engine();
            engine.Run();
        }
    }
}

using System;
using System.Linq;

namespace P03_JediGalaxy
{
    public class Engine
    {
        private int[,] matrix;
        private long sum;

        public void Run()
        {

            int[] dimensions = Console.ReadLine().Split(new string[] { " " },
                StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray();

            int row = dimensions[0];
            int col = dimensions[1];

            matrix = new int[row, col];

            InitcialiseMatrix(row, col, matrix);

            string command = Console.ReadLine();
            sum = 0;

            while (command != "Let the Force be with you")
            {
                int[] ivoS = command.Split(new string[] { " " },
                    StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray();
                int[] evil = Console.ReadLine().Split(new string[] { " " },
                    StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray();

                TrackEvil(evil);
                TrackIvo(ivoS);

                command = Console.ReadLine();
            }

            PrintResult();

        }

        private void PrintResult()
        {
            Console.WriteLine(sum);
        }

        private void TrackIvo(int[] ivoS)
        {
            int rowIvo = ivoS[0];
            int colIvo = ivoS[1];

            while (rowIvo >= 0 && colIvo < matrix.GetLength(1))
            {
                if (IsInside(rowIvo, colIvo))
                {
                    sum += matrix[rowIvo, colIvo];
                }

                colIvo++;
                rowIvo--;
            }
        }

        private void TrackEvil(int[] evil)
        {
            int rowEvil = evil[0];
            int colEvil = evil[1];

            while (rowEvil >= 0 && colEvil >= 0)
            {
                if (IsInside(rowEvil, colEvil))
                {
                    matrix[rowEvil, colEvil] = 0;
                }
                rowEvil--;
                colEvil--;
            }
        }

        private bool IsInside(int row, int col)
        {
            return row >= 0 && row < matrix.GetLength(0) && col >= 0
                                && col < matrix.GetLength(1);
        }

        private static void InitcialiseMatrix(int row, int col, int[,] matrix)
        {
            int value = 0;

            for (int i = 0; i < row; i++)
            {
                for (int j = 0; j < col; j++)
                {
                    matrix[i, j] = value++;
                }
            }
        }
    }
}



P04_Hospital

namespace P04_Hospital
{   
    public class StartUp
    {
        public static void Main(string[] args)
        {
            Engine engine = new Engine();
            engine.Run();
        }
    }
}

using System;
using System.Linq;

namespace P04_Hospital
{
    public class Engine
    {
        private Hospital hospital;

        public Engine()
        {
            this.hospital = new Hospital();
        }

        public void Run()
        {
            string command = Console.ReadLine();

            while (command != "Output")
            {
                string[] inputArgs = command.Split();

                var departament = inputArgs[0];
                var firstName = inputArgs[1];
                var secondName = inputArgs[2];
                var patient = inputArgs[3];

                var fullName = firstName + " " + secondName;

                this.hospital.AddDoctor(firstName, secondName);
                this.hospital.AddDepartment(departament);
                this.hospital.AddPatient(fullName, departament, patient);

                command = Console.ReadLine();
            }

            command = Console.ReadLine();

            while (command != "End")
            {
                string[] args = command.Split(' ', StringSplitOptions.RemoveEmptyEntries);

                if (args.Length == 1)
                {
                    string deparmentName = args[0];
                    Department department = this.hospital.Departments.FirstOrDefault(x => x.Name == deparmentName);
                    Console.WriteLine(department);
                }
                else if (args.Length == 2)
                {
                    bool isRoom = int.TryParse(args[1], out int targetRoom);

                    if (isRoom)
                    {
                        string deparmentName = args[0];

                        Room room = this.hospital.Departments.FirstOrDefault(x => x.Name == deparmentName).Rooms[targetRoom - 1];
                        Console.WriteLine(room);
                    }
                    else
                    {
                        string fullName = args[0] + " " + args[1];
                        Doctor doctor = this.hospital.Doctors.FirstOrDefault(x => x.FullName == fullName);
                        Console.WriteLine(doctor);
                    }
                }

                command = Console.ReadLine();
            }
        }
    }
}

using System.Collections.Generic;
using System.Linq;

namespace P04_Hospital
{
    public class Hospital
    { 
        public Hospital()
        {
            this.Doctors = new List<Doctor>();
            this.Departments = new List<Department>();
        }

        public List<Doctor> Doctors { get; set; }

        public List<Department> Departments { get; set; }
        
        public void AddDoctor(string firstName, string lastName)
        {
            if (!this.Doctors.Any(x => x.FirstName == firstName && x.LastName == lastName))
            {
                var doctor = new Doctor(firstName, lastName);
                this.Doctors.Add(doctor);
            }
        }

        public void AddDepartment(string name)
        {
            if (!this.Departments.Any(x => x.Name == name))
            {
                var department = new Department(name);
                this.Departments.Add(department);
            }
        }

        public void AddPatient(string doctorName,string departmentName, string patientName)
        {
            var doctor = this.Doctors.FirstOrDefault(x => x.FullName == doctorName);
            var department = this.Departments.FirstOrDefault(x => x.Name == departmentName);

            var patient = new Patient(patientName);
            doctor.Patients.Add(patient);
            department.AddPatientInRoom(patient);
        }
    }
}


using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace P04_Hospital
{
    public class Department
    {
        public Department(string name)
        {
            this.Name = name;

            this.Rooms = new List<Room>();

            this.CreateRooms();
        }

        public string Name { get; set; }

        public List<Room> Rooms { get; set; }

        public void AddPatientInRoom(Patient patient)
        {
            var currentRoom = this.Rooms.Where(x => !x.IsFull).FirstOrDefault();

            if (currentRoom != null)
            {
                currentRoom.AddPatient(patient);
            }
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();

            foreach (var room in this.Rooms)
            {
                foreach (var patient in room.Patients)
                {
                    sb.AppendLine(patient.Name);
                }
            }

            return sb.ToString().TrimEnd();
        }

        private void CreateRooms()
        {
            for (int i = 0; i < 20; i++)
            {
                this.Rooms.Add(new Room());
            }
        }
    }
}

using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace P04_Hospital
{
    public class Room
    {
        public Room()
        {
            this.Patients = new List<Patient>();
        }

        public List<Patient> Patients { get; set; }

        public bool IsFull
            => this.Patients.Count >= 3;

        public void AddPatient(Patient patient)
        {
            if (this.Patients.Count < 3)
            {
                this.Patients.Add(patient);
            }
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();

            foreach (var patient in this.Patients.OrderBy(x => x.Name))
            {
                sb.AppendLine(patient.Name);
            }

            return sb.ToString().TrimEnd();
        }
    }
}

using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace P04_Hospital
{
    public class Doctor
    {
        public Doctor(string firstName, string lastName)
        {
            this.FirstName = firstName;
            this.LastName = lastName;

            this.Patients = new List<Patient>();
        }

        public string FirstName { get; set; }

        public string LastName { get; set; }

        public string FullName
            => this.FirstName + " " + this.LastName;

        public List<Patient> Patients { get; set; }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();

            foreach (var patient in this.Patients.OrderBy(x => x.Name))
            {
                sb.AppendLine(patient.Name);
            }

            return sb.ToString().TrimEnd();
        }
    }
}

namespace P04_Hospital
{
    public class Patient
    {
        public Patient(string name)
        {
            this.Name = name;
        }

        public string Name { get; set; }
    }
}


P05_GreedyTimes

namespace P05_GreedyTimes
{
    public class StartUp
    {
        public static void Main(string[] args)
        {
            Engine engine = new Engine();
            engine.Run();
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace P05_GreedyTimes
{
    class Engine
    {
        private  Dictionary<string, Dictionary<string, long>> bag ;
        private long gold;
        private long stone;
        private long money;
        private string whatIs ;


        public void Run()
        {
            long input = long.Parse(Console.ReadLine());
            string[] seif = Console.ReadLine().Split(new char[] { ' ' },
                StringSplitOptions.RemoveEmptyEntries);

            bag = new Dictionary<string, Dictionary<string, long>>();
            gold = 0;
            stone = 0;
            money = 0;

            for (int i = 0; i < seif.Length; i += 2)
            {
                string name = seif[i];
                long num = long.Parse(seif[i + 1]);

                whatIs = string.Empty;

                InitsialiseWhatIs(name);

                if (whatIs == "")
                {
                    continue;
                }
                else if (input < bag.Values.Select(x => x.Values.Sum()).Sum() + num)
                {
                    continue;
                }

                switch (whatIs)
                {
                    case "Gem":
                        if (!bag.ContainsKey(whatIs))
                        {
                            if (bag.ContainsKey("Gold"))
                            {
                                if (num > bag["Gold"].Values.Sum())
                                {
                                    continue;
                                }
                            }
                            else
                            {
                                continue;
                            }
                        }
                        else if (bag[whatIs].Values.Sum() + num > bag["Gold"].Values.Sum())
                        {
                            continue;
                        }
                        break;
                    case "Cash":
                        if (!bag.ContainsKey(whatIs))
                        {
                            if (bag.ContainsKey("Gem"))
                            {
                                if (num > bag["Gem"].Values.Sum())
                                {
                                    continue;
                                }
                            }
                            else
                            {
                                continue;
                            }
                        }
                        else if (bag[whatIs].Values.Sum() + num > bag["Gem"].Values.Sum())
                        {
                            continue;
                        }
                        break;
                }

                FillBag(name);
                IncreaseGoldStoneMoney(name, num);
            }

            PrintResult();

        }

        private void PrintResult()
        {
            foreach (var x in bag)
            {
                Console.WriteLine($"<{x.Key}> ${x.Value.Values.Sum()}");
                foreach (var item2 in x.Value.OrderByDescending(y => y.Key).ThenBy(y => y.Value))
                {
                    Console.WriteLine($"##{item2.Key} - {item2.Value}");
                }
            }
        }

        private void IncreaseGoldStoneMoney(string name, long num)
        {
            bag[whatIs][name] += num;
            if (whatIs == "Gold")
            {
                gold += num;
            }
            else if (whatIs == "Gem")
            {
                stone += num;
            }
            else if (whatIs == "Cash")
            {
                money += num;
            }
        }

        private void FillBag(string name)
        {
            if (!bag.ContainsKey(whatIs))
            {
                bag[whatIs] = new Dictionary<string, long>();
            }

            if (!bag[whatIs].ContainsKey(name))
            {
                bag[whatIs][name] = 0;
            }
        }

        private void InitsialiseWhatIs(string name)
        {
            if (name.Length == 3)
            {
                whatIs = "Cash";
            }
            else if (name.ToLower().EndsWith("gem"))
            {
                whatIs = "Gem";
            }
            else if (name.ToLower() == "gold")
            {
                whatIs = "Gold";
            }
        }
    }
}


namespace P06_Sneaking
{
    class StartUp
    {
        static void Main()
        {
            Engine engine = new Engine();
            engine.Run();
        }          
    }
}

using System;

namespace P06_Sneaking
{
    public class Engine
    {
        private static char[][] room;
        private static int[] samPosition;

        public void Run()
        {
            int n = int.Parse(Console.ReadLine());
            room = new char[n][];

            InitsialiseRoom(n);

            var moves = Console.ReadLine().ToCharArray();

            samPosition = new int[2];

            FindSamPosition();

            for (int i = 0; i < moves.Length; i++)
            {
                MoveEnemy();

                int[] getEnemy = new int[2];

                FindEnemy(getEnemy);

                if (IsEnemyKillSam(getEnemy))
                {
                    room[samPosition[0]][samPosition[1]] = 'X';
                    Console.WriteLine($"Sam died at {samPosition[0]}, {samPosition[1]}");
                    for (int row = 0; row < room.Length; row++)
                    {
                        for (int col = 0; col < room[row].Length; col++)
                        {
                            Console.Write(room[row][col]);
                        }
                        Console.WriteLine();
                    }
                    Environment.Exit(0);
                }

                MoveSam(moves, i);

                for (int j = 0; j < room[samPosition[0]].Length; j++)
                {
                    if (room[samPosition[0]][j] != '.' && room[samPosition[0]][j] != 'S')
                    {
                        getEnemy[0] = samPosition[0];
                        getEnemy[1] = j;
                    }
                }
                if (room[getEnemy[0]][getEnemy[1]] == 'N' && samPosition[0] == getEnemy[0])
                {
                    room[getEnemy[0]][getEnemy[1]] = 'X';
                    Console.WriteLine("Nikoladze killed!");
                    for (int row = 0; row < room.Length; row++)
                    {
                        for (int col = 0; col < room[row].Length; col++)
                        {
                            Console.Write(room[row][col]);
                        }
                        Console.WriteLine();
                    }
                    Environment.Exit(0);
                }
            }
        }

        private static void MoveSam(char[] moves, int i)
        {
            room[samPosition[0]][samPosition[1]] = '.';

            switch (moves[i])
            {
                case 'U':
                    samPosition[0]--;
                    break;
                case 'D':
                    samPosition[0]++;
                    break;
                case 'L':
                    samPosition[1]--;
                    break;
                case 'R':
                    samPosition[1]++;
                    break;
                default:
                    break;
            }
            room[samPosition[0]][samPosition[1]] = 'S';
        }

        private static bool IsEnemyKillSam(int[] getEnemy)
        {
            bool chekD = samPosition[1] < getEnemy[1] && room[getEnemy[0]][getEnemy[1]] == 'd' && getEnemy[0] == samPosition[0];
            bool chekB = getEnemy[1] < samPosition[1] && room[getEnemy[0]][getEnemy[1]] == 'b' && getEnemy[0] == samPosition[0];
            return chekD || chekB;
        }

        private static void MoveEnemy()
        {
            for (int row = 0; row < room.Length; row++)
            {
                for (int col = 0; col < room[row].Length; col++)
                {
                    if (room[row][col] == 'b')
                    {
                        if (row >= 0 && row < room.Length && col + 1 >= 0 && col + 1 < room[row].Length)
                        {
                            room[row][col] = '.';
                            room[row][col + 1] = 'b';
                            col++;
                        }
                        else
                        {
                            room[row][col] = 'd';
                        }
                    }
                    else if (room[row][col] == 'd')
                    {
                        if (row >= 0 && row < room.Length && col - 1 >= 0 && col - 1 < room[row].Length)
                        {
                            room[row][col] = '.';
                            room[row][col - 1] = 'd';
                        }
                        else
                        {
                            room[row][col] = 'b';
                        }
                    }
                }
            }
        }

        private static void FindEnemy(int[] getEnemy)
        {
            for (int j = 0; j < room[samPosition[0]].Length; j++)
            {
                if (room[samPosition[0]][j] != '.' && room[samPosition[0]][j] != 'S')
                {
                    getEnemy[0] = samPosition[0];
                    getEnemy[1] = j;
                }
            }
        }

        private static void FindSamPosition()
        {
            for (int row = 0; row < room.Length; row++)
            {
                for (int col = 0; col < room[row].Length; col++)
                {
                    if (room[row][col] == 'S')
                    {
                        samPosition[0] = row;
                        samPosition[1] = col;
                    }
                }
            }
        }

        private static void InitsialiseRoom(int n)
        {
            for (int row = 0; row < n; row++)
            {
                var input = Console.ReadLine().ToCharArray();
                room[row] = new char[input.Length];
                for (int col = 0; col < input.Length; col++)
                {
                    room[row][col] = input[col];
                }
            }
        }
    }
}
